/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.view;

import br.com.controller.ClienteController;
import br.com.controller.ConhecimentoController;
import br.com.dto.ClienteDTO;
import br.com.dto.ConhecimentoDTO;
import br.com.view.interfaces.Form;
import br.com.utils.exceptions.FormatadorDoubleException;
import br.com.utils.FormatadorData;
import br.com.utils.FormatadorDouble;
import br.com.utils.MostraErro;
import br.com.utils.ValidaData;
import java.awt.event.ActionEvent;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cleber
 */
public class FormAtualizaFrete extends javax.swing.JFrame implements Form {

    private boolean mudouView = false;
    private ConhecimentoController conhecimentoController = new ConhecimentoController();
    private ClienteController clienteController = new ClienteController();

    @Override
    public void setCnpjDestinatario(String cnpj) {
        this.txtCNPJDestinatario.setText(cnpj);
    }

    /**
     * Creates new form FormAtualizaFrete
     */
    public FormAtualizaFrete() {

        initComponents();
        panelValorConhecimento.setVisible(false);
        panelDestinatario.setVisible(false);

        this.populaCbCliente();
        this.setLocationRelativeTo(null);
        //seta o tempo de exibição do ToolTip para 20 segundos
        ToolTipManager.sharedInstance().setDismissDelay(40000);

        this.setExtendedState(MAXIMIZED_BOTH);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGruopAlterarFretePara = new javax.swing.ButtonGroup();
        btnGroupValorConhecimento = new javax.swing.ButtonGroup();
        panelForm = new javax.swing.JPanel();
        panelRegras = new javax.swing.JPanel();
        panelValorConhecimento = new javax.swing.JPanel();
        btnValorLimite = new javax.swing.JRadioButton();
        btnIntervaloValores = new javax.swing.JRadioButton();
        lbValorInicial = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtVlrInicial = new javax.swing.JFormattedTextField();
        txtVlrFinal = new javax.swing.JFormattedTextField();
        panelAlterarFretePara = new javax.swing.JPanel();
        btnValorFixo = new javax.swing.JRadioButton();
        btnPercentual = new javax.swing.JRadioButton();
        txtVlrParaCaculo = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        btnSimular = new javax.swing.JButton();
        jPanelPeriodo = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dataI = new com.toedter.calendar.JDateChooser();
        dataF = new com.toedter.calendar.JDateChooser();
        cbCliente = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnAtualizar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        panelDestinatario = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtCNPJDestinatario = new javax.swing.JTextField();
        btnProcurarDestinatario = new javax.swing.JButton();
        ckHabilitaDestinatario = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbResultado = new javax.swing.JTable();
        panelDadosSimulacao = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtVlrAnterior = new javax.swing.JTextField();
        txtvlrAtual = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualizar Frete Avançada");
        setAlwaysOnTop(true);

        panelRegras.setBorder(javax.swing.BorderFactory.createTitledBorder("Regras de Atualização de Frete"));
        panelRegras.setPreferredSize(new java.awt.Dimension(323, 73));

        panelValorConhecimento.setBorder(javax.swing.BorderFactory.createTitledBorder("Valor do Conhecimento"));
        panelValorConhecimento.setEnabled(false);

        btnGroupValorConhecimento.add(btnValorLimite);
        btnValorLimite.setText("Valor Limite");
        btnValorLimite.setToolTipText("A regra de alteração do Frete será aplica nas Entregas com valor total até o valor informado.");
        btnValorLimite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValorLimiteActionPerformed(evt);
            }
        });

        btnGroupValorConhecimento.add(btnIntervaloValores);
        btnIntervaloValores.setText("Intervalo de Valores");
        btnIntervaloValores.setToolTipText("<html>\nA regra de alteração do Frete será aplicada as Entregas com valor total entre os valores informados. \n<br>\n<br>\n<h4> Exemplo</h4>\nSe os Valores Limites informados forem <b>10,00</b> e <b>15,00</b>. <br>\nA regra será aplicada as entregas que tiverem valores das notas de <br>\n<b>(10,01 até 15,00)</b>.<br>\n<br>\nIsto significa que o <b>Valor Inicial</b>, será desconsiderado (não entrará na regra),<br>\nporem o <b>Valor Final</b> entrará na regra tendo seu valor atualizado.<br>\n<br>\nNeste exemplo entregas que tenham o <b>Total das Notas</b> com valor de <b>R$ 10,00</b>,<br>\nnão serão atualizadas. <br>\n<br>\nQualquer outra entrega com <b>Valor Total das Notas</b> de <b>R$ 10,01</b> até <b>R$ 15,00</b> inclusive, serão atualizadas.\n<br>\n<br>\n</html>");
        btnIntervaloValores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntervaloValoresActionPerformed(evt);
            }
        });

        lbValorInicial.setText("Valor Inicial");

        jLabel5.setText("Valor Final");

        txtVlrInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtVlrInicial.setEnabled(false);
        txtVlrInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVlrInicialKeyPressed(evt);
            }
        });

        txtVlrFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtVlrFinal.setEnabled(false);
        txtVlrFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVlrFinalKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelValorConhecimentoLayout = new javax.swing.GroupLayout(panelValorConhecimento);
        panelValorConhecimento.setLayout(panelValorConhecimentoLayout);
        panelValorConhecimentoLayout.setHorizontalGroup(
            panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValorConhecimentoLayout.createSequentialGroup()
                .addGroup(panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelValorConhecimentoLayout.createSequentialGroup()
                        .addComponent(btnValorLimite)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbValorInicial))
                    .addGroup(panelValorConhecimentoLayout.createSequentialGroup()
                        .addComponent(btnIntervaloValores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addGap(5, 5, 5)
                .addGroup(panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtVlrInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVlrFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelValorConhecimentoLayout.setVerticalGroup(
            panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelValorConhecimentoLayout.createSequentialGroup()
                .addGroup(panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVlrInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbValorInicial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelValorConhecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVlrFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnIntervaloValores)))
            .addComponent(btnValorLimite)
        );

        panelAlterarFretePara.setBorder(javax.swing.BorderFactory.createTitledBorder("Alterar Frete Para"));
        panelAlterarFretePara.setPreferredSize(new java.awt.Dimension(338, 108));

        btnGruopAlterarFretePara.add(btnValorFixo);
        btnValorFixo.setText("Valor Fixo");
        btnValorFixo.setToolTipText("Selecione para atualizar o frete para um Valor Fixo.");
        btnValorFixo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValorFixoActionPerformed(evt);
            }
        });

        btnGruopAlterarFretePara.add(btnPercentual);
        btnPercentual.setText("Percentual");
        btnPercentual.setToolTipText("Selecione para atualizar o frete com base em um Percentual.");
        btnPercentual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPercentualActionPerformed(evt);
            }
        });

        txtVlrParaCaculo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtVlrParaCaculo.setEnabled(false);
        txtVlrParaCaculo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVlrParaCaculoKeyPressed(evt);
            }
        });

        jLabel6.setText("Valor");

        javax.swing.GroupLayout panelAlterarFreteParaLayout = new javax.swing.GroupLayout(panelAlterarFretePara);
        panelAlterarFretePara.setLayout(panelAlterarFreteParaLayout);
        panelAlterarFreteParaLayout.setHorizontalGroup(
            panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAlterarFreteParaLayout.createSequentialGroup()
                .addGroup(panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPercentual)
                    .addComponent(btnValorFixo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtVlrParaCaculo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelAlterarFreteParaLayout.setVerticalGroup(
            panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAlterarFreteParaLayout.createSequentialGroup()
                .addGroup(panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnValorFixo)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAlterarFreteParaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPercentual)
                    .addComponent(txtVlrParaCaculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSimular.setText("Simular");
        btnSimular.setToolTipText("Simula a atualização do Frete.");
        btnSimular.setEnabled(false);
        btnSimular.setMaximumSize(new java.awt.Dimension(85, 28));
        btnSimular.setMinimumSize(new java.awt.Dimension(85, 28));
        btnSimular.setPreferredSize(new java.awt.Dimension(85, 28));
        btnSimular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimularActionPerformed(evt);
            }
        });

        jPanelPeriodo.setBorder(javax.swing.BorderFactory.createTitledBorder("Período"));

        jLabel3.setText("Data Final:");

        jLabel2.setText("Data Incial:");

        dataI.setToolTipText("Data Inicial");
        dataI.setMaxSelectableDate(new java.util.Date(253370775707000L));
        dataI.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataIPropertyChange(evt);
            }
        });

        dataF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataFPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanelPeriodoLayout = new javax.swing.GroupLayout(jPanelPeriodo);
        jPanelPeriodo.setLayout(jPanelPeriodoLayout);
        jPanelPeriodoLayout.setHorizontalGroup(
            jPanelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataI, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataF, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelPeriodoLayout.setVerticalGroup(
            jPanelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanelPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dataF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPeriodoLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPeriodoLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );

        cbCliente.setToolTipText("Selecione o Cliente");
        cbCliente.setAutoscrolls(true);
        cbCliente.setName("cbCliente"); // NOI18N
        cbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Cliente:");

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setToolTipText("Executa atualização do valor de Frete.");
        btnAtualizar.setEnabled(false);
        btnAtualizar.setMaximumSize(new java.awt.Dimension(85, 28));
        btnAtualizar.setMinimumSize(new java.awt.Dimension(85, 28));
        btnAtualizar.setPreferredSize(new java.awt.Dimension(85, 28));
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setToolTipText("Pesquisar conhecimentos no período.");
        btnPesquisar.setMaximumSize(new java.awt.Dimension(85, 28));
        btnPesquisar.setMinimumSize(new java.awt.Dimension(85, 28));
        btnPesquisar.setPreferredSize(new java.awt.Dimension(85, 28));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        panelDestinatario.setBorder(javax.swing.BorderFactory.createTitledBorder("Destinatário"));
        panelDestinatario.setToolTipText("");
        panelDestinatario.setEnabled(false);

        jLabel8.setText("CNPJ");

        txtCNPJDestinatario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCNPJDestinatarioKeyPressed(evt);
            }
        });

        btnProcurarDestinatario.setText("Procurar");
        btnProcurarDestinatario.setToolTipText("Pesquisar conhecimentos no período.");
        btnProcurarDestinatario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarDestinatarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDestinatarioLayout = new javax.swing.GroupLayout(panelDestinatario);
        panelDestinatario.setLayout(panelDestinatarioLayout);
        panelDestinatarioLayout.setHorizontalGroup(
            panelDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDestinatarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCNPJDestinatario, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnProcurarDestinatario)
                .addContainerGap())
        );
        panelDestinatarioLayout.setVerticalGroup(
            panelDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDestinatarioLayout.createSequentialGroup()
                .addGroup(panelDestinatarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtCNPJDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarDestinatario))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ckHabilitaDestinatario.setText("Por Destinatário");
        ckHabilitaDestinatario.setToolTipText("Marque está caixa caso queira atualizar o frete de Destinatários especificos.");
        ckHabilitaDestinatario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckHabilitaDestinatarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRegrasLayout = new javax.swing.GroupLayout(panelRegras);
        panelRegras.setLayout(panelRegrasLayout);
        panelRegrasLayout.setHorizontalGroup(
            panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegrasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRegrasLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(ckHabilitaDestinatario))
                    .addGroup(panelRegrasLayout.createSequentialGroup()
                        .addComponent(jPanelPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelRegrasLayout.createSequentialGroup()
                        .addComponent(panelAlterarFretePara, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelValorConhecimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSimular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        panelRegrasLayout.setVerticalGroup(
            panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegrasLayout.createSequentialGroup()
                .addGroup(panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckHabilitaDestinatario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelPeriodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDestinatario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelValorConhecimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelAlterarFretePara, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addGroup(panelRegrasLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSimular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        tbResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod.", "Cliente", "Destinatario", "Data", "Vlr. Notas", "Vlr. Frete", "Novo Frete", "Vai Alterar", "Foi Alterado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbResultado);
        if (tbResultado.getColumnModel().getColumnCount() > 0) {
            tbResultado.getColumnModel().getColumn(0).setMinWidth(70);
            tbResultado.getColumnModel().getColumn(0).setPreferredWidth(70);
            tbResultado.getColumnModel().getColumn(0).setMaxWidth(70);
            tbResultado.getColumnModel().getColumn(1).setMinWidth(300);
            tbResultado.getColumnModel().getColumn(1).setPreferredWidth(300);
            tbResultado.getColumnModel().getColumn(1).setMaxWidth(700);
            tbResultado.getColumnModel().getColumn(2).setMinWidth(300);
            tbResultado.getColumnModel().getColumn(2).setPreferredWidth(300);
            tbResultado.getColumnModel().getColumn(2).setMaxWidth(700);
            tbResultado.getColumnModel().getColumn(3).setResizable(false);
            tbResultado.getColumnModel().getColumn(4).setResizable(false);
            tbResultado.getColumnModel().getColumn(5).setResizable(false);
            tbResultado.getColumnModel().getColumn(6).setResizable(false);
            tbResultado.getColumnModel().getColumn(6).setPreferredWidth(70);
            tbResultado.getColumnModel().getColumn(7).setResizable(false);
            tbResultado.getColumnModel().getColumn(7).setPreferredWidth(70);
            tbResultado.getColumnModel().getColumn(8).setResizable(false);
            tbResultado.getColumnModel().getColumn(8).setPreferredWidth(70);
        }

        panelDadosSimulacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultado da Simulação"));

        jLabel4.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel4.setText("Total Anterior");

        txtVlrAnterior.setEditable(false);
        txtVlrAnterior.setToolTipText("Total dor Frete Antes da Simulação.");

        txtvlrAtual.setEditable(false);
        txtvlrAtual.setToolTipText("Total do Frete Simulado.");

        jLabel7.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel7.setText("Total Atual");

        javax.swing.GroupLayout panelDadosSimulacaoLayout = new javax.swing.GroupLayout(panelDadosSimulacao);
        panelDadosSimulacao.setLayout(panelDadosSimulacaoLayout);
        panelDadosSimulacaoLayout.setHorizontalGroup(
            panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDadosSimulacaoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtVlrAnterior)
                    .addComponent(txtvlrAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        panelDadosSimulacaoLayout.setVerticalGroup(
            panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDadosSimulacaoLayout.createSequentialGroup()
                .addGroup(panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVlrAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDadosSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtvlrAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)))
        );

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(panelFormLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelRegras, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelDadosSimulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelRegras, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelDadosSimulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimularActionPerformed

        this.conhecimentoController = new ConhecimentoController();
        try {
            this.simularAtualizacao(dataI.getDate(), dataF.getDate());
            this.habilitarBtnAtualizar(true);
        } catch (Exception ex) {
            MostraErro.show(this, ex);
        }

    }//GEN-LAST:event_btnSimularActionPerformed

    private void btnValorFixoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValorFixoActionPerformed
        mudouView = true;
        habilitarBtnAtualizar(false);
        this.habilitarTtxtVlrParaAlteracao(evt);
        this.habilitarPanelValorConhecimento(evt);
    }//GEN-LAST:event_btnValorFixoActionPerformed

    private void btnPercentualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPercentualActionPerformed
        mudouView = true;
        habilitarBtnAtualizar(false);
        this.habilitarTtxtVlrParaAlteracao(evt);
        this.habilitarPanelValorConhecimento(evt);
    }//GEN-LAST:event_btnPercentualActionPerformed

    private void btnValorLimiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValorLimiteActionPerformed
        mudouView = true;
        habilitarBtnAtualizar(false);
        this.habilitarTxtVlrInicial(evt);
        this.habilitarBtnSimular(evt);
    }//GEN-LAST:event_btnValorLimiteActionPerformed

    private void btnIntervaloValoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntervaloValoresActionPerformed
        mudouView = true;
        habilitarBtnAtualizar(false);
        this.habilitarTxtVlrInicial(evt);
        this.habilitarTxtVlrFinal(evt);
        this.habilitarBtnSimular(evt);
    }//GEN-LAST:event_btnIntervaloValoresActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        try {
            this.conhecimentoController = new ConhecimentoController();
            if (!panelDestinatario.isVisible() || txtCNPJDestinatario.getText().isEmpty()) {
                this.pesquisarConhecimentos(dataI.getDate(), dataF.getDate());
            } else {
                this.pesquisarConhecimentosDestinatario(dataI.getDate(), dataF.getDate(), txtCNPJDestinatario.getText());
            }

        } catch (Exception e) {
            MostraErro.show(this, e);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed

        try {
            this.populaTabela(this.atualizarFrete());
        } catch (Exception e) {
            MostraErro.show(this, e);
        }
        /*
         Seta o botao atualizar disable. Deve estar desabalitado para garantir
         que o usuario sempre clique primeiro em simular. Isto garante que a
         variavel conhecimentoController sempre esteja populada com o ClienteDTO VIEW.
         Caso
         contrario se o usuario alterar o ClienteDTO na VIEW e clicar em
         atualizar, o modelo estára com dados diferentes da VIEW. Fazendo com 
         que a alteração do frete seja refletida no Cliente errado.
        
         */

        btnAtualizar.setEnabled(false);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void cbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClienteActionPerformed
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_cbClienteActionPerformed

    private void dataIPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataIPropertyChange
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_dataIPropertyChange

    private void dataFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataFPropertyChange
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_dataFPropertyChange

    private void txtVlrParaCaculoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVlrParaCaculoKeyPressed
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_txtVlrParaCaculoKeyPressed

    private void txtVlrInicialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVlrInicialKeyPressed
        habilitarBtnAtualizar(false);
        mudouView = true;
    }//GEN-LAST:event_txtVlrInicialKeyPressed

    private void txtVlrFinalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVlrFinalKeyPressed
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_txtVlrFinalKeyPressed

    private void btnProcurarDestinatarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarDestinatarioActionPerformed

        mudouView = true;
        habilitarBtnAtualizar(false);

        FormConsultaDestinatario formListaDestinatario = new FormConsultaDestinatario(this);
        this.txtCNPJDestinatario.setText(formListaDestinatario.getCnpj());
    }//GEN-LAST:event_btnProcurarDestinatarioActionPerformed

    private void ckHabilitaDestinatarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckHabilitaDestinatarioActionPerformed
        habilitaPanelDestinatario(evt);
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_ckHabilitaDestinatarioActionPerformed

    private void txtCNPJDestinatarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCNPJDestinatarioKeyPressed
        mudouView = true;
        habilitarBtnAtualizar(false);
    }//GEN-LAST:event_txtCNPJDestinatarioKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFrete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFrete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFrete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFrete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormAtualizaFrete().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.ButtonGroup btnGroupValorConhecimento;
    private javax.swing.ButtonGroup btnGruopAlterarFretePara;
    private javax.swing.JRadioButton btnIntervaloValores;
    private javax.swing.JRadioButton btnPercentual;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnProcurarDestinatario;
    private javax.swing.JButton btnSimular;
    private javax.swing.JRadioButton btnValorFixo;
    private javax.swing.JRadioButton btnValorLimite;
    private javax.swing.JComboBox cbCliente;
    private javax.swing.JCheckBox ckHabilitaDestinatario;
    private com.toedter.calendar.JDateChooser dataF;
    private com.toedter.calendar.JDateChooser dataI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanelPeriodo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbValorInicial;
    private javax.swing.JPanel panelAlterarFretePara;
    private javax.swing.JPanel panelDadosSimulacao;
    private javax.swing.JPanel panelDestinatario;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelRegras;
    private javax.swing.JPanel panelValorConhecimento;
    private javax.swing.JTable tbResultado;
    private javax.swing.JTextField txtCNPJDestinatario;
    private javax.swing.JTextField txtVlrAnterior;
    private javax.swing.JFormattedTextField txtVlrFinal;
    private javax.swing.JFormattedTextField txtVlrInicial;
    private javax.swing.JFormattedTextField txtVlrParaCaculo;
    private javax.swing.JTextField txtvlrAtual;
    // End of variables declaration//GEN-END:variables
    /*
     * ##################################
     * Inicio do Codigo Personalizado
     * ##################################
     */

    private void populaTabela(List<ConhecimentoDTO> conhecimentos) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tbResultado.getModel();

        if (conhecimentos == null || conhecimentos.size() < 1) {
            model.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Nehum registro foi localizado.", "Aviso",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            double totalAnterior = 0;
            double totalAtual = 0;
            model.setRowCount(conhecimentos.size());

            for (int i = 0; i < conhecimentos.size(); i++) {
                model.setValueAt(conhecimentos.get(i).getId(), i, 0);
                model.setValueAt(conhecimentos.get(i).getCliente().getNome(), i, 1);
                model.setValueAt(conhecimentos.get(i).getDestinatario().getNome(), i, 2);
                model.setValueAt(FormatadorData.toString(conhecimentos.get(i).getDataCC()), i, 3);
                model.setValueAt(FormatadorDouble.toString(conhecimentos.get(i).getVlCC()), i, 4);
                model.setValueAt(FormatadorDouble.toString(conhecimentos.get(i).getVlFrete()), i, 5);
                model.setValueAt(FormatadorDouble.toString(conhecimentos.get(i).getNovoFrete()), i, 6);
                model.setValueAt(conhecimentos.get(i).isVaiAlterar(), i, 7);
                model.setValueAt(conhecimentos.get(i).isAlterouFrete(), i, 8);

                totalAnterior += conhecimentos.get(i).getVlFrete();
                totalAtual += conhecimentos.get(i).getNovoFrete();
            }

            txtVlrAnterior.setText(FormatadorDouble.toString(totalAnterior));
            txtvlrAtual.setText(FormatadorDouble.toString(totalAtual));
        }
    }

    private void pesquisarConhecimentos(Date inicio, Date fim) throws Exception {

        if (ValidaData.validar(inicio, fim)) {

            conhecimentoController.getConhecimento().setCliente((ClienteDTO) cbCliente.getSelectedItem());
            populaTabela(conhecimentoController.getConhecimentos(inicio, fim));

        }
    }

    private void pesquisarConhecimentosDestinatario(Date inicio, Date fim, String cnpjDestinatario) throws Exception {

        if (ValidaData.validar(inicio, fim)) {

            conhecimentoController.getConhecimento().setCliente((ClienteDTO) cbCliente.getSelectedItem());
            populaTabela(conhecimentoController.getConhecimentos(inicio, fim, cnpjDestinatario));

        }
    }

    //Simula a atualização de frete
    private void simularAtualizacao(Date inicio, Date fim) throws Exception {
        List<ConhecimentoDTO> conhecimentos = null;

        if (validaCampos()) {
            conhecimentoController.getConhecimento().setCliente((ClienteDTO) cbCliente.getSelectedItem());

            //se o panelDestinatario estiver habilitado chama o procedimento 
            //correspondente para atualziar o frete por destinatario
            if (panelDestinatario.isVisible()) {

                //Se valor fixo e valor limite estiverem selecionados
                if (btnValorFixo.isSelected() && btnValorLimite.isSelected()) {

                    conhecimentos = conhecimentoController.simularFreteFixoLimiteDestinatario(inicio, fim, txtVlrParaCaculo.getText(),
                            txtCNPJDestinatario.getText(), txtVlrInicial.getText());

                    //Se valor fixo e Intervalo de valores estiverem selecionados
                } else if (btnValorFixo.isSelected() && btnIntervaloValores.isSelected()) {

                    conhecimentos = conhecimentoController.simularFreteFixoIntervaloDestinatario(inicio, fim,
                            txtVlrParaCaculo.getText(), txtCNPJDestinatario.getText(),
                            txtVlrInicial.getText(), txtVlrFinal.getText());

                    //Se percentual e valor limite estiverem selecionados
                } else if (btnPercentual.isSelected() && btnValorLimite.isSelected()) {

                    conhecimentos = conhecimentoController.simularFretePercentualLimiteDestinatario(inicio, fim,
                            txtVlrParaCaculo.getText(), txtCNPJDestinatario.getText(),
                            txtVlrInicial.getText());

                    //Se percentual e intervalo de valores estiverem selecionados
                } else if (btnPercentual.isSelected() && btnIntervaloValores.isSelected()) {

                    conhecimentos = conhecimentoController.simularFretePercentualIntervaloDestinatario(
                            inicio, fim, txtVlrParaCaculo.getText(),
                            txtCNPJDestinatario.getText(),
                            txtVlrInicial.getText(),
                            txtVlrFinal.getText());
                }
                //se panel destinatario nao estiver habilitado
                //havlia criterios de atualização sem destinatario
            } else {

                //Se valor fixo e valor limite estiverem selecionados
                if (btnValorFixo.isSelected() && btnValorLimite.isSelected()) {

                    conhecimentos = conhecimentoController.simularFixoLimite(txtVlrInicial.getText(),
                            txtVlrParaCaculo.getText(), inicio, fim);

                    //Se valor fixo e Intervalo de valores estiverem selecionados
                } else if (btnValorFixo.isSelected() && btnIntervaloValores.isSelected()) {

                    conhecimentos = conhecimentoController.simularFixoIntervalo(txtVlrInicial.getText(),
                            txtVlrFinal.getText(),
                            txtVlrParaCaculo.getText(), inicio, fim);

                    //Se percentual e valor limite estiverem selecionados
                } else if (btnPercentual.isSelected() && btnValorLimite.isSelected()) {

                    conhecimentos = conhecimentoController.simularPercentualLimite(txtVlrInicial.getText(),
                            txtVlrParaCaculo.getText(), inicio, fim);

                    //Se percentual e intervalo de valores estiverem selecionados
                } else if (btnPercentual.isSelected() && btnIntervaloValores.isSelected()) {

                    conhecimentos = conhecimentoController.simularPercentualIntervalo(txtVlrInicial.getText(),
                            txtVlrFinal.getText(), txtVlrParaCaculo.getText(), inicio, fim);
                    //se paneldestinatario estiver visivel entra no if
                }
                //else if (panelDestinatario.isVisible()) {
                //  System.out.println("destinatario habilitado entrou no if");
                //}
            }
        } else {
            throw new Exception("Impossível determinar a regra para \n"
                    + "Atualização do Frete. \n"
                    + "Verifique se todos as criterios foram preenchidos "
                    + "e tente novamente. \n"
                    + "Se o erro persistir contate o suporte informando o problema");
        }

        this.populaTabela(conhecimentos);
    }

    private void populaCbCliente() {

        clienteController = new ClienteController();
        try {
            List<ClienteDTO> clientes = clienteController.getClientes();
            DefaultComboBoxModel model = new DefaultComboBoxModel(clientes.toArray());

            cbCliente.setModel(model);
        } catch (Exception ex) {
            MostraErro.show(this, ex);
        }
    }

    /*
     * Habilita TextField txVlrParaAlteracao
     */
    private void habilitarTtxtVlrParaAlteracao(ActionEvent evt) {
        txtVlrParaCaculo.setEnabled(true);
    }

    /*
     * Habilita TextField txtVlrInicial
     */
    private void habilitarTxtVlrInicial(ActionEvent evt) {
        if (evt.getSource().equals(btnValorLimite)) {
            lbValorInicial.setText("Valor Limite");
        } else {
            lbValorInicial.setText("Valor Inicial");
        }
        txtVlrInicial.setEnabled(true);
        txtVlrFinal.setEnabled(false);
    }

    /*
     * Habilita TextField txtVlrFinal
     */
    private void habilitarTxtVlrFinal(ActionEvent evt) {
        txtVlrFinal.setEnabled(true);
    }
    /*
     * Habilita o botão Atualizar
     */

    private void habilitarBtnAtualizar(boolean b) {
        btnAtualizar.setEnabled(b);
    }
    /*
     * Habilita o botão Simular
     */

    private void habilitarBtnSimular(ActionEvent evt) {
        btnSimular.setEnabled(true);
    }

    /*
     * Verifica se todos a campos obrigátorios
     * foram preenchidos
     */
    private boolean validaCampos() throws Exception {
        boolean ok = true;

//        if (simulou && mudouView) {
//            btnAtualizar.setEnabled(false);
//            simulou = false;
//            mudouView = false;
//            throw new Exception("Dados do formulário foram alterados, \n"
//                    + "após a ultima simulação. \n \n"
//                    + "Efetue a simulação novamente para poder atualizar.");
//        } else {
//            simulou = false;
//        }
        ValidaData.validar(dataI.getDate(), dataF.getDate());

        if (panelDestinatario.isVisible() && txtCNPJDestinatario.getText().isEmpty()) {
            this.showWarning("Informe o CNPJ do destinatário ou clique \n"
                    + "em procurar para selecionar um.");
            return false;
        }

        if (cbCliente.getSelectedIndex() < 0) {
            throw new Exception("Selecione um cliente.");

        }
        if (txtVlrParaCaculo.getText().isEmpty()) {
            throw new Exception("Preencha o campo Alterar Frete Para: Valor.");
        }

        if (btnValorLimite.isSelected()) {
            if (txtVlrInicial.getText().isEmpty()) {
                throw new Exception("Preencha o campo Valor do Conhecimento: Valor Limite.");
            }

        }

        if (btnIntervaloValores.isSelected()) {

            if (!txtVlrInicial.getText().isEmpty() && !txtVlrFinal.getText().isEmpty()) {
                double vlrInicial;
                double vlrFinal;
                try {
                    vlrInicial = FormatadorDouble.formatar(txtVlrInicial.getText());
                    vlrFinal = FormatadorDouble.formatar(txtVlrFinal.getText());
                } catch (FormatadorDoubleException e) {
                    MostraErro.show(this, e);
                    return false;
                }

                if (vlrFinal <= vlrInicial) {
                    throw new Exception("O valor informado para o campo Valor do Conhecimento: Valor Final, \n"
                            + "deve ser maior que o Valor Inicial.");

                }
            } else if (txtVlrFinal.getText().isEmpty()) {
                throw new Exception("Preencha o campo Valor do Conhecimento: Valor Final.");

            } else if (txtVlrInicial.getText().isEmpty()) {
                throw new Exception("Preencha o campo Valor do Conhecimento: Valor Inicial.");
            }
        }

        return ok;
    }

    private void habilitarPanelValorConhecimento(ActionEvent evt) {
        panelValorConhecimento.setVisible(true);
    }

    //Atualiza o frete
    private List<ConhecimentoDTO> atualizarFrete() throws Exception {
        //se paneldestinatario estiver habilitado retorna list com destinatarios informados
        //se não retorna list com todos os destinatarios
        if (panelDestinatario.isVisible()) {
            return conhecimentoController.atualizarFrete(dataI.getDate(), dataF.getDate(), txtCNPJDestinatario.getText());
        } else {
            return conhecimentoController.atualizarFrete(dataI.getDate(), dataF.getDate());
        }
    }

    private void limpaForm() {
        txtVlrFinal.setText(null);
        txtVlrInicial.setText(null);
        txtVlrParaCaculo.setText(null);
        cbCliente.setSelectedIndex(-1);
        btnIntervaloValores.setSelected(false);
        btnPercentual.setSelected(false);
        btnValorFixo.setSelected(false);
        btnValorLimite.setSelected(false);
        dataF.setDate(null);
        dataI.setDate(null);
    }

    private void habilitaPanelDestinatario(ActionEvent evt) {
        if (panelDestinatario.isVisible()) {
            panelDestinatario.setVisible(false);
        } else {
            panelDestinatario.setVisible(true);
        }
    }

    private void showWarning(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Atenção", JOptionPane.WARNING_MESSAGE);
    }
}
