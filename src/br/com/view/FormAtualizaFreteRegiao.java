/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.view;

import br.com.controller.ClienteController;
import br.com.controller.ConhecimentoController;
import br.com.controller.RegiaoController;
import br.com.dto.ClienteDTO;
import br.com.dto.ConhecimentoDTO;
import br.com.entity.Regiao;
import br.com.utils.exceptions.DaoException;
import br.com.utils.exceptions.FormatadorDataException;
import br.com.utils.exceptions.FormatadorDoubleException;
import br.com.utils.exceptions.ValidaDataException;
import br.com.utils.FormatadorData;
import br.com.utils.FormatadorDouble;
import br.com.utils.MostraErro;
import br.com.utils.TrataErro;
import br.com.utils.ValidaData;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ti
 */
public class FormAtualizaFreteRegiao extends javax.swing.JFrame {

    RegiaoController regiaoController;
    List<ConhecimentoDTO> conhecimentoDTOs;

    /**
     * Creates new form FormAtualizaFreteRegiao
     */
    public FormAtualizaFreteRegiao() {

        this.setLocationRelativeTo(null);
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        initComponents();
        regiaoController = new RegiaoController();
        poplupaCbCliente();
        populaCbRegiao();
        changeBtnAtualizar(false);
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        panelCliente = new javax.swing.JPanel();
        cbCliente = new javax.swing.JComboBox();
        cbRegiao = new javax.swing.JComboBox();
        txtNovoFrete = new javax.swing.JTextField();
        panelPeriodo = new javax.swing.JPanel();
        dataInicio = new com.toedter.calendar.JDateChooser();
        dataFim = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSimular = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ckClienteTodos = new javax.swing.JCheckBox();
        panelSimulacao = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbResultado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualizar Frete por Região");
        setAlwaysOnTop(true);

        panelPrincipal.setFocusable(false);

        panelCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Regras de Atualização de Frete"));
        panelCliente.setFocusable(false);

        cbRegiao.setToolTipText("");

        panelPeriodo.setBorder(javax.swing.BorderFactory.createTitledBorder("Período"));

        jLabel4.setText("Inicio:");
        jLabel4.setFocusable(false);

        jLabel5.setText("Fim:");
        jLabel5.setFocusable(false);

        javax.swing.GroupLayout panelPeriodoLayout = new javax.swing.GroupLayout(panelPeriodo);
        panelPeriodo.setLayout(panelPeriodoLayout);
        panelPeriodoLayout.setHorizontalGroup(
            panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeriodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataInicio, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(dataFim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelPeriodoLayout.setVerticalGroup(
            panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeriodoLayout.createSequentialGroup()
                .addGroup(panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(dataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(panelPeriodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(dataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel2.setText("Cliente:");
        jLabel2.setFocusable(false);

        jLabel1.setText("Região:");
        jLabel1.setFocusable(false);

        btnSimular.setText("Simular");
        btnSimular.setToolTipText("");
        btnSimular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimularActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        jLabel3.setText("Novo Frete:");
        jLabel3.setFocusable(false);

        ckClienteTodos.setText("Todos");
        ckClienteTodos.setToolTipText("Marque para selecionar todos os Clientes.");
        ckClienteTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckClienteTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelClienteLayout = new javax.swing.GroupLayout(panelCliente);
        panelCliente.setLayout(panelClienteLayout);
        panelClienteLayout.setHorizontalGroup(
            panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClienteLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnSimular)
                        .addGap(18, 18, 18)
                        .addComponent(btnAtualizar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelClienteLayout.createSequentialGroup()
                        .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelClienteLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNovoFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelClienteLayout.createSequentialGroup()
                                .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbRegiao, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckClienteTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(panelPeriodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelClienteLayout.setVerticalGroup(
            panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelClienteLayout.createSequentialGroup()
                        .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(ckClienteTodos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbRegiao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNovoFrete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panelPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimular)
                    .addComponent(btnAtualizar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        panelSimulacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulação"));

        tbResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Cliente", "Destinatario", "Data", "Município", "Região", "Frete", "Novo Frete"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbResultado);

        javax.swing.GroupLayout panelSimulacaoLayout = new javax.swing.GroupLayout(panelSimulacao);
        panelSimulacao.setLayout(panelSimulacaoLayout);
        panelSimulacaoLayout.setHorizontalGroup(
            panelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
        );
        panelSimulacaoLayout.setVerticalGroup(
            panelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSimulacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(panelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelSimulacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panelPrincipal, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimularActionPerformed

        if (isPreenchido()) {

            try {
                List<ConhecimentoDTO> conhecimentos = getConhecimentos();
                this.populaTabela(conhecimentos);
            } catch (Exception e) {
                MostraErro.show(this, e);
            }
        }

    }//GEN-LAST:event_btnSimularActionPerformed

    private void ckClienteTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckClienteTodosActionPerformed
        if (ckClienteTodos.isSelected()) {
            cbCliente.setEnabled(false);
        } else {
            cbCliente.setEnabled(true);
        }
    }//GEN-LAST:event_ckClienteTodosActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        try {
            this.save(conhecimentoDTOs);
            JOptionPane.showMessageDialog(this, "Frete atualizado com sucesso.", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
            limpaForm();
        } catch (Exception ex) {
            MostraErro.show(this, ex);
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFreteRegiao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFreteRegiao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFreteRegiao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAtualizaFreteRegiao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAtualizaFreteRegiao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnSimular;
    private javax.swing.JComboBox cbCliente;
    private javax.swing.JComboBox cbRegiao;
    private javax.swing.JCheckBox ckClienteTodos;
    private com.toedter.calendar.JDateChooser dataFim;
    private com.toedter.calendar.JDateChooser dataInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelCliente;
    private javax.swing.JPanel panelPeriodo;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel panelSimulacao;
    private javax.swing.JTable tbResultado;
    private javax.swing.JTextField txtNovoFrete;
    // End of variables declaration//GEN-END:variables

    private void poplupaCbCliente() {

        ClienteController controller = new ClienteController();
        List<ClienteDTO> clientes = null;

        DefaultComboBoxModel model = (DefaultComboBoxModel) cbCliente.getModel();

        try {
            clientes = controller.getClientes();
        } catch (Exception e) {
            MostraErro.show(this, e);
        }

        for (ClienteDTO dto : clientes) {
            model.addElement(dto);
        }

    }

    private void populaCbRegiao() {

        List<Regiao> regioes = null;
        try {
            regioes = regiaoController.getRegioes();
        } catch (DaoException e) {
            MostraErro.show(this, e);
        }

        DefaultComboBoxModel model = (DefaultComboBoxModel) cbRegiao.getModel();

        if (regioes == null) {
            RuntimeException e = new RuntimeException("Erro a popular combo Regiões.");
            MostraErro.show(this, e);
        } else {

            for (Regiao regiao : regioes) {
                model.addElement(regiao);
            }
        }
    }

    private ClienteDTO getCliente() {
        ClienteDTO cliente;
        cliente = (ClienteDTO) cbCliente.getModel().getSelectedItem();

        return cliente;
    }

    private Regiao getRegiao() {
        Regiao regiao;
        regiao = (Regiao) cbRegiao.getModel().getSelectedItem();
        return regiao;
    }

    private double getNovoFrete() throws FormatadorDoubleException {

        double frete;

        // frete = FormatadorDouble.toDouble(txtNovoFrete.getText());
        frete = FormatadorDouble.formatar(txtNovoFrete.getText());

        return frete;
    }

    private void populaTabela(List<ConhecimentoDTO> conhecimentos) throws TrataErro {

        if (conhecimentos != null || !conhecimentos.isEmpty()) {

            DefaultTableModel model = (DefaultTableModel) tbResultado.getModel();
            model.setRowCount(conhecimentos.size() + 1);
            int i = 0;

            for (ConhecimentoDTO dto : conhecimentos) {

                model.setValueAt(dto.getId(), i, 0);
                model.setValueAt(dto.getCliente().getNome(), i, 1);
                model.setValueAt(dto.getDestinatario().getNome(), i, 2);
                model.setValueAt(FormatadorData.toString(dto.getDataCC()), i, 3);
                model.setValueAt(dto.getDestinatario().getMunicipio().getNome(), i, 4);
                model.setValueAt(dto.getRegiao().getNome(), i, 5);
                model.setValueAt(FormatadorDouble.toString(dto.getVlFrete()), i, 6);
                model.setValueAt(FormatadorDouble.toString(dto.getNovoFrete()), i, 7);

                i++;
            }
            model.setValueAt("Quantidade de Registros Localizados: " + i, i, 0);

            changeBtnAtualizar(true);
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum resultado encontrado para "
                    + "os critéios informados.", "Atenção!", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private Date getDataFim() {
        return dataFim.getDate();
    }

    private Date getDataInicio() {
        return dataInicio.getDate();
    }

    private boolean isPreenchido() {

        try {
            if (!txtNovoFrete.getText().isEmpty() && ValidaData.validar(dataInicio.getDate(), dataFim.getDate())) {

                return true;
            }
        } catch (ValidaDataException | FormatadorDataException e) {
            MostraErro.show(this, e);
        }

        JOptionPane.showMessageDialog(this, "Preencha todos os campos.", "Atenção", JOptionPane.WARNING_MESSAGE);
        return false;
    }

    private List<ConhecimentoDTO> getConhecimentos() throws Exception {
        ConhecimentoController controller = new ConhecimentoController();

        Regiao regiao = getRegiao();
        Date dtFim = getDataFim();
        Date dtInicio = getDataInicio();
        List<ConhecimentoDTO> conhecimentos = null;
        try {
            //Verifica se o checkbox todos foi selecionado
            if (ckClienteTodos.isSelected()) {
                conhecimentos = controller.getByRegiao(regiao, dtInicio, dtFim);
            } else {
                ClienteDTO cliente = getCliente();
                conhecimentos = controller.getByRegiao(regiao, cliente, dtInicio, dtFim);
            }

        } catch (Exception e) {
            MostraErro.show(this, e);
        }

        this.conhecimentoDTOs = controller.simularFreteFixo(conhecimentos, getNovoFrete());
        return conhecimentos;
    }

    private void changeBtnAtualizar(boolean habilitar) {

        btnAtualizar.setEnabled(habilitar);

    }

    private void save(List<ConhecimentoDTO> conhecimentoDTOs) throws Exception {

        ConhecimentoController conhecimentoController = new ConhecimentoController();

        conhecimentoController.updateFrete(conhecimentoDTOs);

    }

    private void limpaForm() {

        DefaultTableModel model = (DefaultTableModel) tbResultado.getModel();
        model.setRowCount(0);

        this.conhecimentoDTOs = null;
        this.txtNovoFrete.setText("");
        changeBtnAtualizar(false);

    }

}
