package br.com.view;

import br.com.controller.ConhecimentoController;
import br.com.model.ConhecimentoCarga;
import br.com.utils.exceptions.LeitorXmlException;
import br.com.utils.FormatadorData;
import br.com.utils.MostraErro;
import br.com.utils.TrataErro;
import java.awt.Cursor;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cleber
 */
public class FormImportaXML extends javax.swing.JFrame {

    private List<String> paths = null;
    private List<ConhecimentoCarga> naoImportados;
    private List<ConhecimentoCarga> importados;

    /**
     * Creates new form FormImportaXML
     */
    public FormImportaXML() {

        initComponents();
        this.setLocationRelativeTo(null);
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.btnImportarNotas.setEnabled(false);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForm = new javax.swing.JPanel();
        tabPanelResutado = new javax.swing.JTabbedPane();
        panelArquivosselecionados = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbArquivosSelecionados = new javax.swing.JTable();
        panelConhecimentos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbNotasImportadadas = new javax.swing.JTable();
        panelNaoImportados = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbNotasNaoImportadas = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnImportarNotas = new javax.swing.JButton();
        btnLocalizarArquivos = new javax.swing.JButton();
        dataCC = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        txtPasta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importar Arquivos XML da NFe");
        setAlwaysOnTop(true);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 400));

        tbArquivosSelecionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome do Arquivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbArquivosSelecionados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbArquivosSelecionados);

        javax.swing.GroupLayout panelArquivosselecionadosLayout = new javax.swing.GroupLayout(panelArquivosselecionados);
        panelArquivosselecionados.setLayout(panelArquivosselecionadosLayout);
        panelArquivosselecionadosLayout.setHorizontalGroup(
            panelArquivosselecionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArquivosselecionadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelArquivosselecionadosLayout.setVerticalGroup(
            panelArquivosselecionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelArquivosselecionadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanelResutado.addTab("Arquivos Selecionados", panelArquivosselecionados);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(450, 400));

        tbNotasImportadadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Destinatario", "Data", "Nota(s)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbNotasImportadadas);

        javax.swing.GroupLayout panelConhecimentosLayout = new javax.swing.GroupLayout(panelConhecimentos);
        panelConhecimentos.setLayout(panelConhecimentosLayout);
        panelConhecimentosLayout.setHorizontalGroup(
            panelConhecimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelConhecimentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelConhecimentosLayout.setVerticalGroup(
            panelConhecimentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConhecimentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanelResutado.addTab("Notas Importadas", panelConhecimentos);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(450, 400));

        tbNotasNaoImportadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "DestinatÃ¡rio", "Data", "Nota(s)", "Motivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbNotasNaoImportadas);
        if (tbNotasNaoImportadas.getColumnModel().getColumnCount() > 0) {
            tbNotasNaoImportadas.getColumnModel().getColumn(0).setMinWidth(300);
            tbNotasNaoImportadas.getColumnModel().getColumn(0).setPreferredWidth(300);
            tbNotasNaoImportadas.getColumnModel().getColumn(1).setMinWidth(300);
            tbNotasNaoImportadas.getColumnModel().getColumn(1).setPreferredWidth(300);
            tbNotasNaoImportadas.getColumnModel().getColumn(2).setMinWidth(100);
            tbNotasNaoImportadas.getColumnModel().getColumn(2).setPreferredWidth(100);
            tbNotasNaoImportadas.getColumnModel().getColumn(2).setMaxWidth(100);
            tbNotasNaoImportadas.getColumnModel().getColumn(3).setPreferredWidth(150);
            tbNotasNaoImportadas.getColumnModel().getColumn(4).setMinWidth(100);
            tbNotasNaoImportadas.getColumnModel().getColumn(4).setPreferredWidth(200);
        }

        javax.swing.GroupLayout panelNaoImportadosLayout = new javax.swing.GroupLayout(panelNaoImportados);
        panelNaoImportados.setLayout(panelNaoImportadosLayout);
        panelNaoImportadosLayout.setHorizontalGroup(
            panelNaoImportadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 863, Short.MAX_VALUE)
            .addGroup(panelNaoImportadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelNaoImportadosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelNaoImportadosLayout.setVerticalGroup(
            panelNaoImportadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
            .addGroup(panelNaoImportadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelNaoImportadosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jScrollPane3.getAccessibleContext().setAccessibleName("");

        tabPanelResutado.addTab("Notas NÃ£o Importadas", panelNaoImportados);

        javax.swing.GroupLayout panelFormLayout = new javax.swing.GroupLayout(panelForm);
        panelForm.setLayout(panelFormLayout);
        panelFormLayout.setHorizontalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanelResutado)
        );
        panelFormLayout.setVerticalGroup(
            panelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanelResutado)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados para ImportaÃ§Ã£o"));

        btnImportarNotas.setText("Importar Notas");
        btnImportarNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarNotasActionPerformed(evt);
            }
        });

        btnLocalizarArquivos.setText("Localizar Arquivos NFe");
        btnLocalizarArquivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocalizarArquivosActionPerformed(evt);
            }
        });

        dataCC.setToolTipText("Data Inicial");
        dataCC.setMaxSelectableDate(new java.util.Date(253370775707000L));
        dataCC.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataCCPropertyChange(evt);
            }
        });

        jLabel1.setText("Data do Conhecimento:");

        txtPasta.setEditable(false);

        jLabel2.setText("Importando Aquivos de NF-e da Pasta:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataCC, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLocalizarArquivos)
                        .addGap(18, 18, 18)
                        .addComponent(btnImportarNotas)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPasta)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnImportarNotas)
                        .addComponent(btnLocalizarArquivos)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLocalizarArquivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocalizarArquivosActionPerformed

        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        this.limpaTabelas();

//        Date inicio = new Date();
//        System.out.println("Inicio da importaÃ§Ã£o: " + inicio.toString());
        if (this.validaData()) {

            File[] arquivos = this.getFiles();

            if (arquivos != null) {

                paths = this.getPaths(arquivos);
                this.populaTabelaArquivos(paths);
                txtPasta.setText(arquivos[0].getParent());
                this.importarNotas();
                this.populaTabelaNaoImportadas();
                this.populaTabelaNotasImportadas();
                btnImportarNotas.setEnabled(true);

//                Date termino = new Date();
//                System.out.println("Inicio da importaÃ§Ã£o: " + termino.toString());
            }
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnLocalizarArquivosActionPerformed

    private void dataCCPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataCCPropertyChange

        //dataCC.setDate(new Date());
        this.limpaTabelas();
        this.txtPasta.setText("");
        this.btnImportarNotas.setEnabled(false);
    }//GEN-LAST:event_dataCCPropertyChange

    private void btnImportarNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarNotasActionPerformed

        btnImportarNotas.setEnabled(false);
        try {
            this.insertConhecimentos();
        } catch (Exception ex) {
            mostraErro(ex);
        }
    }//GEN-LAST:event_btnImportarNotasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormImportaXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormImportaXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormImportaXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormImportaXML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormImportaXML().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImportarNotas;
    private javax.swing.JButton btnLocalizarArquivos;
    private com.toedter.calendar.JDateChooser dataCC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelArquivosselecionados;
    private javax.swing.JPanel panelConhecimentos;
    private javax.swing.JPanel panelForm;
    private javax.swing.JPanel panelNaoImportados;
    private javax.swing.JTabbedPane tabPanelResutado;
    private javax.swing.JTable tbArquivosSelecionados;
    private javax.swing.JTable tbNotasImportadadas;
    private javax.swing.JTable tbNotasNaoImportadas;
    private javax.swing.JTextField txtPasta;
    // End of variables declaration//GEN-END:variables

    /**
     * Inicio de Codigo personalizado
     */

    /*
     * Retorna List<String> contendo o path dos arquivos XML
     * contidos no diretorio informado pelo FileChooser
     */
    private List<String> getPaths(File[] files) {

        paths = new ArrayList<String>(files.length);

        for (File f : files) {
            paths.add(f.getPath());
        }

        return paths;
    }

    //Retorna Array contendo os files
    private File[] getFiles() {

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivos NFe", "xml");

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(filter);
        fc.setMultiSelectionEnabled(true);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int opcao = fc.showDialog(fc, "Selecione os arquivos XML");

        if (opcao == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFiles();
        } else {
            this.showWarning("AÃ§Ã£o cancelada pelo usuÃ¡rio. \n"
                    + "Nehum arquivo foi selecionado.");
//            JOptionPane.showMessageDialog(this, "AÃ§Ã£o cancelada pelo usuÃ¡rio. \n"
//                    + "Nehum arquivo foi selecionado.", "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE);
            this.btnImportarNotas.setEnabled(false);
            this.txtPasta.setText("");
            return null;
        }
    }

    /**
     * Aciona o ConhecimentoController para inciar a leitura do(s) arquivos XML
     * da NFe.
     */
    private void importarNotas() {
        ConhecimentoController conhecimentoController = new ConhecimentoController(paths.size());
        try {
            conhecimentoController.importarXML(paths, dataCC.getDate());
            naoImportados = conhecimentoController.getNaoImportados();

            //Se houverem notas que nÃ£o puderem ser importadas
            //exibe uma warning para o usuario e seta o foco na
            //guia Notas nÃ£o importadas index =2
            if (naoImportados != null) {
                this.showWarning(naoImportados.size() + " nota(s) nÃ£o puderam ser importadas.\n"
                        + "Verique a Guia Notas NÃ£o Importadas.");
                tabPanelResutado.setSelectedIndex(2);
            }
            importados = conhecimentoController.getConhecimentosImportados();
        } catch (LeitorXmlException ex) {
            mostraErro(ex);
        } catch (Exception ex) {
            mostraErro(ex);
        }
    }

    private void mostraErro(Exception e) {
        MostraErro.show(this, e);
    }

    /**
     * Aciona o ConhecimentoController para realizar a persistencia dos
     * conhecimentos.
     *
     * @throws Exception Repassa a exception lanÃ§ada pelo insertConhecimentos.
     */
    private void insertConhecimentos() throws Exception {

        ConhecimentoController controller = new ConhecimentoController();
        controller.insertConhecimentos(importados);
        JOptionPane.showMessageDialog(this, "ImportaÃ§Ã£o ConluÃ­da com sucesso!", "AtenÃ§Ã£o", JOptionPane.INFORMATION_MESSAGE);
        this.limpaTabelas();
    }

    /**
     * Verifica a data informada pelo usuÃ¡rio para o conhecimento
     *
     * @return true se a data for menor ou igual a data do sistema, caso
     * contraio retorna false.
     *
     */
    private boolean validaData() {

        Date dataAtual = new Date();

        if (dataCC.getDate() == null) {
            this.showWarning("Informe a data do Conhecimento.");
            return false;
        } else if (dataCC.getDate().getTime() > dataAtual.getTime()) {
            this.showWarning("Data invalida! \n"
                    + "A Data do Conhecimento nÃ£o pode ser superior a data do sistema.");
            return false;
        } else {

            return true;
        }
    }
    
    /*
        Cria uma dialog de aviso para informar o usuÃ¡rio
        @param String (msg) Mensagem humanizada
    */
    private void showWarning(String msg) {
        JOptionPane.showMessageDialog(this, msg, "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE);
    }

    private void populaTabelaArquivos(List<String> paths) {

        DefaultTableModel model = (DefaultTableModel) tbArquivosSelecionados.getModel();

        int linhas = paths.size();
        model.setRowCount(linhas + 1);

        for (int i = 0; i < linhas; i++) {
            model.setValueAt(paths.get(i), i, 0);
        }

        model.setValueAt(paths.size() + " Arquivo(s) Selecionado(s).", linhas, 0);
    }

    private void populaTabelaNotasImportadas() {

        DefaultTableModel model = (DefaultTableModel) tbNotasImportadadas.getModel();

        if (importados != null) {
            int linhas = importados.size();
            model.setRowCount(linhas + 1);

            for (int i = 0; i < linhas; i++) {
                model.setValueAt(importados.get(i).getClienteDTO().getNome(), i, 0);
                model.setValueAt(importados.get(i).getDestinatarioDTO().getNome(), i, 1);
                try {
                    model.setValueAt(FormatadorData.toString(importados.get(i).getDataCC()), i, 2);
                } catch (TrataErro e) {
                    mostraErro(e);
                }

                model.setValueAt(importados.get(i).getNotas(), i, 3);
            }

            model.setValueAt(importados.size() + " Nota(s) importada(s).", linhas, 0);
        }
    }

    private void populaTabelaNaoImportadas() {
        DefaultTableModel model = (DefaultTableModel) tbNotasNaoImportadas.getModel();

        if (naoImportados != null) {
            int linhas = naoImportados.size();
            model.setRowCount(linhas + 1);

            for (int i = 0; i < linhas; i++) {
                model.setValueAt(naoImportados.get(i).getClienteDTO().getNome(), i, 0);
                model.setValueAt(naoImportados.get(i).getDestinatarioDTO().getNome(), i, 1);
                try {
                    model.setValueAt(FormatadorData.toString(naoImportados.get(i).getDataCC()), i, 2);
                } catch (Exception e) {
                    mostraErro(e);
                }

                model.setValueAt(naoImportados.get(i).getNotas(), i, 3);
                model.setValueAt(naoImportados.get(i).getMotivoImportacao(), i, 4);
            }

            model.setValueAt(naoImportados.size() + " Nota(s) nÃ£o importada(s).", linhas, 0);
        } else {
            model.setRowCount(1);
            model.setValueAt("Todas a notas foram importadas com sucesso.", 0, 0);
        }
    }

    //Elimina todas as linhas das tabelas.
    private void limpaTabelas() {
        DefaultTableModel modelArquivos = (DefaultTableModel) tbArquivosSelecionados.getModel();
        modelArquivos.setRowCount(0);

        DefaultTableModel modelImp = (DefaultTableModel) tbNotasImportadadas.getModel();
        modelImp.setRowCount(0);

        DefaultTableModel modelNaoImp = (DefaultTableModel) tbNotasNaoImportadas.getModel();
        modelNaoImp.setRowCount(0);

        //Seta as listas como null por garantia.
        //Pois se por algum motivo o batÃ£o importar nÃ£o for
        //desabilitado poderia ser gerada duplicidade de dados no banco.
        naoImportados = null;
        importados = null;
        paths = null;

    }
}
